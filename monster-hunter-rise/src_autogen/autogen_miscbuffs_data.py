#!/usr/bin/env python3
# -*- coding: ascii -*-

"""
Filename: autogen_miscbuffs_data.py
Author:   <contact@simshadows.com>

Reads the miscellaneous buffs data file, and generates the source files.
"""

from collections import Counter
from common import json_read, file_write, is_upper_snake_case, is_safe_name

JSON_PATH  = "./data/database_miscbuffs.json"
H_PATH = "./src/database/database_miscbuffs.h"
CPP_PATH = "./src/database/autogenerated/database_miscbuffs.cpp"

#########################################################################################

H_BASE = """
/*
 * This file is auto-generated.
 * Do not edit directly!
 */

#ifndef MISCBUFFS_DATABASE_H
#define MISCBUFFS_DATABASE_H

#include <string>

#include "../core/core.h"

namespace MiscBuffsDatabase
{

using MHWIBuildSearch::MiscBuff;

const MiscBuff& get_miscbuff(const std::string& miscbuff_id) noexcept;

} // namespace

#endif // MISCBUFFS_DATABASE_H
"""

#########################################################################################

CPP_BASE = """
/*
 * This file is auto-generated.
 * Do not edit directly!
 */

#include <unordered_map>

#include "../database_miscbuffs.h"

namespace MiscBuffsDatabase
{{


static const std::unordered_map<std::string, MiscBuff> g_miscbuffs_map = {{
{miscbuffs_map_elements}
}};


const MiscBuff& get_miscbuff(const std::string& miscbuff_id) noexcept {{
    return g_miscbuffs_map.at(miscbuff_id);
}}


}} // namespace
"""

#########################################################################################

def parse_miscbuffs(j):
    miscbuffs = {}
    names = set() # Used only for validation
    uniqueness_tags = Counter()
    for (miscbuff_id, jj) in j.items():
        t = {
                # Struct data
                "miscbuff_id":         miscbuff_id,
                "miscbuff_name":       jj["name"],
                #"class":              jj["class"], # This field in the database is purely for human use.
                "added_raw":           jj.get("added_raw", 0),
                "base_raw_multiplier": jj.get("base_raw_multiplier", 1.0),
                "uniqueness_tags":     jj["uniqueness_tags"],
            }

        # ID
        if not is_upper_snake_case(t["miscbuff_id"]):
            raise ValueError("IDs must be upper case letters, numbers, or underscores.")

        # Names
        if not is_safe_name(t["miscbuff_name"]):
            raise ValueError("Name may not be safe.")
        elif t["miscbuff_name"] in names:
            raise ValueError("Names must be unique.")
        names.add(t["miscbuff_name"])

        # Added Raw
        if not isinstance(t["added_raw"], int):
            raise ValueError("Added raw must be an integer.")
        elif t["added_raw"] < 0:
            raise ValueError("Added raw must be zero or greater.")

        # Base Raw Multiplier
        if not isinstance(t["base_raw_multiplier"], float):
            raise ValueError("Base raw multiplier must be a float.")
        elif t["base_raw_multiplier"] < 1.0:
            raise ValueError("Base raw multiplier must be 1.0 or greater.")

        # Uniqueness Tags
        if any(not is_upper_snake_case(x) for x in t["uniqueness_tags"]):
            raise ValueError("Uniqueness tags must be upper case letters, numbers, or underscores.")
        uniqueness_tags.update(t["uniqueness_tags"])

        miscbuffs[t["miscbuff_id"]] = t

    if any((x <= 1) for (_, x) in uniqueness_tags.items()):
        raise ValueError("Uniqueness tags must have at least two participating buffs.")

    return miscbuffs

def generate_miscbuffs_source():
    j = json_read(JSON_PATH)

    miscbuffs = parse_miscbuffs(j["miscbuffs"])

    miscbuffs_map_elements = []

    for (_, t) in miscbuffs.items():
        uniqueness_tags = []
        for uniqueness_tag in t["uniqueness_tags"]:
            uniqueness_tags.append(f"                \"{uniqueness_tag}\"")
        uniqueness_tags_str = "\n".join(uniqueness_tags)

        miscbuffs_map_elements.append(
                    f"    {{\n"
                    f"        \"{t['miscbuff_id']}\",\n"
                    f"        {{\n"
                    f"            \"{t['miscbuff_id']}\", // id\n"
                    f"            \"{t['miscbuff_name']}\", // name\n"
                    f"            {t['added_raw']}, // added_raw\n"
                    f"            {t['base_raw_multiplier']}, // base_raw_multiplier\n"
                    f"            {{\n"
                    f"{uniqueness_tags_str}\n"
                    f"            }}\n"
                    f"        }}\n"
                    f"    }},"
                )

    file_write(H_PATH, data=H_BASE)

    cpp_file_data = CPP_BASE.format(
            miscbuffs_map_elements="\n".join(miscbuffs_map_elements),
        )
    file_write(CPP_PATH, data=cpp_file_data)


generate_miscbuffs_source()

