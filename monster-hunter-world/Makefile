# Clang 9 is the best-performing compiler in my experience on my machine,
# even beating out Clang 10 and GCC 10.
CXX2=clang++-9

CXXFLAGSBASE= \
	-Wall \
	-Werror \
	-Wextra \
	-std=c++17
CXXFLAGSALL=$(CXXFLAGSBASE) \
	-O3 \
	-DNDEBUG \
	-flto \
	-fomit-frame-pointer
CXXFLAGSFAST=$(CXXFLAGSALL) \
 	-march=native

##########################################################################################
##########################################################################################
##########################################################################################

# Using these flags by default!
CXXFLAGS=$(CXXFLAGSALL)

EXEC=mhwibs
MAINOBJECTS=src/mhwi_build_search.o
OBJECTS=src/search.o \
		src/search_jsonparse.o \
		src/core/src/build_components.o \
		src/core/src/sharpness_gauge.o \
		src/core/src/weapon_augments.o \
		src/core/src/weapon_upgrades.o \
		src/support/src/containers_armour_equips.o \
		src/support/src/containers_deco_equips.o \
		src/support/src/containers_miscbuffs_equips.o \
		src/support/src/containers_skill_map.o \
		src/support/src/containers_skill_spec.o \
		src/support/src/containers_weapon_instance.o \
		src/support/src/skill_contributions.o \
		src/support/src/build_calculations.o \
		src/utils/src/logging.o \
		src/database/src/database.o \
		src/database/autogenerated/database_miscbuffs.o \
		src/database/autogenerated/database_skills.o \
		src/database/src/database_decorations.o \
		src/database/src/database_weapons.o \
		src/database/src/database_armour.o \
		src/database/src/database_charms.o

TESTEXEC=mhwibs-test
TESTOBJECTS=tests/run_tests.o

##########################################################################################
# Main Targets ###########################################################################
##########################################################################################

# 'all' is intended for a high-portability executable.
.PHONY : all
all : $(EXEC) test

# 'fast' is intended for a faster executable, at the cost of portability.
.PHONY : fast
fast : CXXFLAGS=$(CXXFLAGSFAST)
fast : all

.PHONY : asserts
asserts : CXXFLAGS=$(CXXFLAGSBASE) -O3
asserts : all

.PHONY : profiling
profiling : CXXFLAGS=$(CXXFLAGSBASE) -g -O3 -fno-omit-frame-pointer
profiling : all

.PHONY : debug
debug : CXXFLAGS=$(CXXFLAGSBASE) -fsanitize=address -g -O3
debug : all

##########################################################################################
# Cleanup ################################################################################
##########################################################################################

.PHONY : clean
clean :
	rm -f $(EXEC)
	rm -f $(TESTEXEC)
	rm -f $(OBJECTS)
	rm -f $(MAINOBJECTS)
	rm -f $(TESTOBJECTS)

##########################################################################################
# Testing ################################################################################
##########################################################################################

.PHONY : test
test : $(TESTEXEC)
	./mhwibs-test

$(TESTEXEC) : $(OBJECTS) $(TESTOBJECTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $(TESTEXEC) $(OBJECTS) $(TESTOBJECTS)

##########################################################################################
# Compiling the project ##################################################################
##########################################################################################

$(EXEC) : autogen $(OBJECTS) $(MAINOBJECTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $(EXEC) $(OBJECTS) $(MAINOBJECTS)

.PHONY : autogen
autogen :
	./src_autogen/autogen_miscbuffs_data.py
	./src_autogen/autogen_skills_data.py

##########################################################################################
# Specific Compilers #####################################################################
##########################################################################################

# *2

.PHONY : all2
all2 : CXX=$(CXX2)
all2 : all

.PHONY : fast2
fast2 : CXX=$(CXX2)
fast2 : fast

.PHONY : asserts2
asserts2 : CXX=$(CXX2)
asserts2 : asserts

.PHONY : profiling2
profiling2 : CXX=$(CXX2)
profiling2 : profiling

.PHONY : debug2
debug2 : CXX=$(CXX2)
debug2 : debug

## *3
#
#.PHONY : all3
#all3 : CXX=$(CXX3)
#all3 : all
#
#.PHONY : fast3
#fast3 : CXX=$(CXX3)
#fast3 : fast
#
#.PHONY : asserts3
#asserts3 : CXX=$(CXX3)
#asserts3 : asserts
#
#.PHONY : debug3
#debug3 : CXX=$(CXX3)
#debug3 : debug

